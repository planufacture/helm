---
name: Update Helm Chart Version

on:
  repository_dispatch:
    types: [update-helm-version]

jobs:
  update-chart:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Update Chart Version
        env:
          NEW_VERSION: ${{ github.event.client_payload.version }}
          SERVICE_NAME: ${{ github.event.client_payload.service }}
        run: |
          # Update the specific microservice version in values.yaml
          yq -i ".microServices.$SERVICE_NAME.image.tag = \"$NEW_VERSION\"" charts/planufacture/values.yaml

          # Update the chart version (increment patch version)
          CHART_VERSION=$(grep '^version:' charts/planufacture/Chart.yaml | awk '{print $2}')
          NEW_CHART_VERSION=$(echo $CHART_VERSION | awk -F. '{$NF = $NF + 1;} 1' OFS=.)
          sed -i "s/version: .*/version: $NEW_CHART_VERSION/" charts/planufacture/Chart.yaml

      - name: Package Helm Chart
        run: |
          helm package charts/planufacture

      - name: Update Helm Repository Index
        run: |
          # If index.yaml doesn't exist, create it
          if [ ! -f index.yaml ]; then
            helm repo index .
          else
            helm repo index . --merge index.yaml
          fi

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "chore: update ${{ github.event.client_payload.service }} version to ${{ github.event.client_payload.version }}"
          title: "chore: update ${{ github.event.client_payload.service }} version to ${{ github.event.client_payload.version }}"
          body: |
            Updates the ${{ github.event.client_payload.service }} microservice to version ${{ github.event.client_payload.version }}.

            This PR was automatically created by a GitHub Action.
          branch: update-chart-version
          base: main

      - name: Auto-merge if checks pass
        run: |
          PR_NUMBER=$(gh pr list --json number --jq '.[0].number')
          gh pr merge $PR_NUMBER --auto --merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        run: |
          # Get the new chart version
          NEW_CHART_VERSION=$(grep '^version:' charts/planufacture/Chart.yaml | awk '{print $2}')

          # Create a new release
          gh release create "v$NEW_CHART_VERSION" \
            --title "Release v$NEW_CHART_VERSION" \
            --notes "Updated ${{ github.event.client_payload.service }} to version ${{ github.event.client_payload.version }}" \
            *.tgz index.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
